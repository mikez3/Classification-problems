# -*- coding: utf-8 -*-
"""HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SuUElMHpevxKSmBAqPAUW6tFaJeqBArm
"""
# ---------- 1o ----------
# Load data from drive and import libraries
import pandas as pd
from google.colab import drive
from sklearn.metrics import accuracy_score, precision_score,recall_score, f1_score
from sklearn import preprocessing
# Decision Trees
from sklearn.tree import DecisionTreeClassifier
# k-Nearest Neighbors
from sklearn.neighbors import KNeighborsClassifier
# Naïve Bayes
from sklearn.naive_bayes import GaussianNB
# Linear Discriminant Analysis
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.metrics import confusion_matrix
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

drive.mount('/content/drive')
drive.mount("/content/drive", force_remount=True)
df =pd.read_excel("drive/MyDrive/ML/Dataset2Use_Assignment2.xlsx")

# ---------- 2o ----------
# Print number of healthy and bankrupt companies for each year
r=df.groupby(["ΕΤΟΣ", "ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)"]).size()
print(r)

# Print min, max, average for every financial indicator for each year
result = df.groupby('ΕΤΟΣ').aggregate({'365* ( Β.Υ / Κοστ.Πωλ )':['min','max','mean']},)
print(result)

result = df.groupby('ΕΤΟΣ').aggregate({'Λειτ.Αποτ/Συν.Ενεργ. (ROA)':['min','max','mean']})
print(result)

result = df.groupby('ΕΤΟΣ').aggregate({'ΧΡΗΜ.ΔΑΠΑΝΕΣ / ΠΩΛΗΣΕΙΣ':['min','max','mean']})
print(result)

result = df.groupby('ΕΤΟΣ').aggregate({' ΠΡΑΓΜΑΤΙΚΗ ΡΕΥΣΤΟΤΗΤΑ :  (ΚΕ-ΑΠΟΘΕΜΑΤΑ) / Β.Υ':['min','max','mean']})
print(result)

result = df.groupby('ΕΤΟΣ').aggregate({'(ΑΠΑΙΤ.*365) / ΠΩΛ.':['min','max','mean']})
print(result)

result = df.groupby('ΕΤΟΣ').aggregate({'Συν.Υποχρ/Συν.Ενεργ':['min','max','mean']})
print(result)

result = df.groupby('ΕΤΟΣ').aggregate({'Διάρκεια Παραμονής Αποθεμάτων':['min','max','mean']})
print(result)

result = df.groupby('ΕΤΟΣ').aggregate({'Λογαριθμος Προσωπικού':['min','max','mean']})
print(result)

# ---------- 3ο ----------
# Normalize data
scaler = preprocessing.MinMaxScaler()
names = df.columns

d = scaler.fit_transform(df)
scaled_df = pd.DataFrame(d, columns=names)

# Create train and test data
training_data = scaled_df.sample(frac=0.9, random_state=200)
testing_data = scaled_df.drop(training_data.index)

print(f"No. of training examples: {training_data.shape[0]}")
print(f"No. of testing examples: {testing_data.shape[0]}")

# ---------- 4ο ----------
# Print healthy and bankrupt companies in train set
training_stats = training_data.groupby([ "ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)"]).size()
print("Train Set:\nHealthy:",training_stats[0])
print("Non-healthy:",training_stats[1])
# Print healthy and bankrupt companies in test set
testing_stats = testing_data.groupby([ "ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)"]).size()
print("\nTest Set:\nHealthy:",testing_stats[0])
print("Non-healthy:",testing_stats[1])

# ---------- 5ο ----------
# Seperate class from rest of the data
train_without_class = training_data.drop(["ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)"], axis=1).values
train_class = (training_data["ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)"]).values
print('\n')
test_without_class = testing_data.drop(["ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)"], axis=1).values
test_class = (testing_data[ "ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)"]).values

# Initialize classifiers
tree = DecisionTreeClassifier()
knn = KNeighborsClassifier(n_neighbors=3)
gnb = GaussianNB()
lda = LinearDiscriminantAnalysis()

#train classifiers
tree.fit(train_without_class, train_class)
knn.fit(train_without_class, train_class)
gnb.fit(train_without_class, train_class)
lda.fit(train_without_class, train_class)

# ---------- 6o ---------
#use the trained classifier to estimate the outputs of each classifier
tree_predicted_output_values_train = tree.predict(train_without_class)
tree_predicted_output_values_test = tree.predict(test_without_class)

knn_predicted_output_values_train = knn.predict(train_without_class)
knn_predicted_output_values_test = knn.predict(test_without_class)

gnb_predicted_output_values_train = gnb.predict(train_without_class)
gnb_predicted_output_values_test = gnb.predict(test_without_class)

lda_predicted_output_values_train = lda.predict(train_without_class)
lda_predicted_output_values_test = lda.predict(test_without_class)

# Confusion matrices computation
tree_matrix_train = confusion_matrix(train_class,tree_predicted_output_values_train)
tree_matrix_test = confusion_matrix(test_class,tree_predicted_output_values_test)

knn_matrix_train = confusion_matrix(train_class,knn_predicted_output_values_train)
knn_matrix_test = confusion_matrix(test_class,knn_predicted_output_values_test)

gnb_matrix_train = confusion_matrix(train_class,gnb_predicted_output_values_train)
gnb_matrix_test = confusion_matrix(test_class,gnb_predicted_output_values_test)

lda_matrix_train = confusion_matrix(train_class,lda_predicted_output_values_train)
lda_matrix_test = confusion_matrix(test_class,lda_predicted_output_values_test)

print('Decision Tree:')
print("Train confusion matrix\n",tree_matrix_train)
print("Test confusion matrix\n",tree_matrix_test,"\n")

print('k-Nearest Neighbors:')
print("Train confusion matrix\n",knn_matrix_train)
print("Test confusion matrix\n",knn_matrix_test,"\n")

print('Naïve Bayes:')
print("Train confusion matrix\n",gnb_matrix_train)
print("Test confusion matrix\n",gnb_matrix_test,"\n")

print('Linear Discriminant Analysis:')
print("Train confusion matrix\n",lda_matrix_train)
print("Test confusion matrix\n",lda_matrix_test,"\n")

# --------- 7o ----------
# Compute Precision, Precision, Recall, F1 score metrics for each classifier on train and test set
acc_train_tree = accuracy_score(train_class,tree_predicted_output_values_train )
pre_train_tree = precision_score(train_class,tree_predicted_output_values_train,average='macro' )
rec_train_tree = recall_score(train_class,tree_predicted_output_values_train,average='macro' )
f1_train_tree =f1_score(train_class,tree_predicted_output_values_train,average='macro' )
print('Desicion Tree Train:\nAcc, Pre, Rec, F1 scores are:', '{:.2f} '.format(acc_train_tree), '{:.2f} '.format(pre_train_tree), '{:.2f} '.format(rec_train_tree), '{:.2f} '.format(f1_train_tree))

acc_test_tree = accuracy_score(test_class,tree_predicted_output_values_test )
pre_test_tree = precision_score(test_class,tree_predicted_output_values_test,average='macro' )
rec_test_tree = recall_score(test_class,tree_predicted_output_values_test,average='macro' )
f1_test_tree =f1_score(test_class,tree_predicted_output_values_test,average='macro' )
print('Desicion Tree Test:\nAcc, Pre, Rec, F1 scores are:', '{:.2f} '.format(acc_test_tree), '{:.2f} '.format(pre_test_tree), '{:.2f} '.format(rec_test_tree), '{:.2f} '.format(f1_test_tree))

acc_train_knn = accuracy_score(train_class,knn_predicted_output_values_train )
pre_train_knn = precision_score(train_class,knn_predicted_output_values_train,average='macro' )
rec_train_knn = recall_score(train_class,knn_predicted_output_values_train,average='macro' )
f1_train_knn =f1_score(train_class,knn_predicted_output_values_train,average='macro' )
print('kNN Train:\nAcc, Pre, Rec, F1 scores are:', '{:.2f} '.format(acc_train_knn), '{:.2f} '.format(pre_train_knn), '{:.2f} '.format(rec_train_knn), '{:.2f} '.format(f1_train_knn))

acc_test_knn = accuracy_score(test_class,knn_predicted_output_values_test )
pre_test_knn = precision_score(test_class,knn_predicted_output_values_test,average='macro' )
rec_test_knn = recall_score(test_class,knn_predicted_output_values_test,average='macro' )
f1_test_knn =f1_score(test_class,knn_predicted_output_values_test,average='macro' )
print('kNN Test:\nAcc, Pre, Rec, F1 scores are:', '{:.2f} '.format(acc_test_knn), '{:.2f} '.format(pre_test_knn), '{:.2f} '.format(rec_test_knn), '{:.2f} '.format(f1_test_knn))

acc_train_gnb = accuracy_score(train_class,gnb_predicted_output_values_train )
pre_train_gnb = precision_score(train_class,gnb_predicted_output_values_train,average='macro' )
rec_train_gnb = recall_score(train_class,gnb_predicted_output_values_train,average='macro' )
f1_train_gnb =f1_score(train_class,gnb_predicted_output_values_train,average='macro' )
print('Naïve Bayes Train:\nAcc, Pre, Rec, F1 scores are:', '{:.2f} '.format(acc_train_gnb), '{:.2f} '.format(pre_train_gnb), '{:.2f} '.format(rec_train_gnb), '{:.2f} '.format(f1_train_gnb))

acc_test_gnb = accuracy_score(test_class,gnb_predicted_output_values_test )
pre_test_gnb = precision_score(test_class,gnb_predicted_output_values_test,average='macro' )
rec_test_gnb = recall_score(test_class,gnb_predicted_output_values_test,average='macro' )
f1_test_gnb =f1_score(test_class,gnb_predicted_output_values_test,average='macro' )
print('Naïve Bayes Test:\nAcc, Pre, Rec, F1 scores are:', '{:.2f} '.format(acc_test_gnb), '{:.2f} '.format(pre_test_gnb), '{:.2f} '.format(rec_test_gnb), '{:.2f} '.format(f1_test_gnb))

acc_train_lda = accuracy_score(train_class,lda_predicted_output_values_train )
pre_train_lda = precision_score(train_class,lda_predicted_output_values_train,average='macro' )
rec_train_lda = recall_score(train_class,lda_predicted_output_values_train,average='macro' )
f1_train_lda =f1_score(train_class,lda_predicted_output_values_train,average='macro' )
print('LDA Train:\nAcc, Pre, Rec, F1 scores are:', '{:.2f} '.format(acc_train_lda), '{:.2f} '.format(pre_train_lda), '{:.2f} '.format(rec_train_lda), '{:.2f} '.format(f1_train_lda))

acc_test_lda = accuracy_score(test_class,lda_predicted_output_values_test )
pre_test_lda = precision_score(test_class,lda_predicted_output_values_test,average='macro' )
rec_test_lda = recall_score(test_class,lda_predicted_output_values_test,average='macro' )
f1_test_lda =f1_score(test_class,lda_predicted_output_values_test,average='macro' )
print('LDA Test:\nAcc, Pre, Rec, F1 scores are:', '{:.2f} '.format(acc_test_lda), '{:.2f} '.format(pre_test_lda), '{:.2f} '.format(rec_test_lda), '{:.2f} '.format(f1_test_lda))

# ---------- 8o ----------
# Write results to a csv file
data = {
    'Classifier Name' : ['Decision Trees','Decision Trees','k-Nearest Neighbors','k-Nearest Neighbors', 'Naïve Bayes', 'Naïve Bayes','Linear Discriminant Analysis','Linear Discriminant Analysis'],
    'Training or test set':['train','test','train','test','train','test','train','test'],
    'Number of training samples' : [training_data.shape[0]]*8,
    'Number of non-healthy companies in training sample' : [training_stats[1]]*8,
    'TP' : [tree_matrix_train[0][0],tree_matrix_test[0][0],knn_matrix_train[0][0],knn_matrix_test[0][0],gnb_matrix_train[0][0],gnb_matrix_test[0][0],lda_matrix_train[0][0],lda_matrix_test[0][0]],
    'TN' : [tree_matrix_train[1][1],tree_matrix_test[1][1],knn_matrix_train[1][1],knn_matrix_test[1][1],gnb_matrix_train[1][1],gnb_matrix_test[1][1],lda_matrix_train[1][1],lda_matrix_test[1][1]],
    'FP' : [tree_matrix_train[0][1],tree_matrix_test[0][1],knn_matrix_train[0][1],knn_matrix_test[0][1],gnb_matrix_train[0][1],gnb_matrix_test[0][1],lda_matrix_train[0][1],lda_matrix_test[0][1]],
    'FN' : [tree_matrix_train[1][0],tree_matrix_test[1][0],knn_matrix_train[0][0],knn_matrix_test[1][0],gnb_matrix_train[0][0],gnb_matrix_test[1][0],lda_matrix_train[0][0],lda_matrix_test[1][0]],
    'Precision' : [pre_train_tree,pre_test_tree,pre_train_knn,pre_test_knn,pre_train_gnb,pre_test_gnb,pre_train_lda,pre_test_lda],
    'Recall' : [rec_train_tree,rec_test_tree,rec_train_knn,rec_test_knn,rec_train_gnb,rec_test_gnb,rec_train_lda,rec_test_lda],
    'F1 score' : [f1_train_tree,f1_test_tree,f1_train_knn,f1_test_knn,f1_train_gnb,f1_test_gnb,f1_train_lda,f1_test_lda],
    'Accuracy' : [acc_train_tree,acc_test_tree,acc_train_knn,acc_test_knn,acc_train_gnb,acc_test_gnb,acc_train_lda,acc_test_lda]
}
df_csv = pd.DataFrame(data)
df_csv.to_csv('drive/MyDrive/ML/results.csv')

# ---------- GRAPH ----------
# Demonstrate with graphs the best classifier based on F1 score
df_graphs =pd.read_csv("drive/MyDrive/ML/results.csv")
sns.set(rc={'figure.figsize':(10,5)})
sns.barplot(x='Classifier Name', y='F1 score', hue='Training or test set', data=df_graphs)
